#!/usr/bin/env ruby
require 'moneymanager'
require 'commander/import'

program :name, 'mm'
program :version, Moneymanager::VERSION
program :description, 'Manage your money via commandline'

command :add do |c|
  c.syntax = 'mm add <path>'
  c.description = 'Import the CSV file'
  c.action do |args, _options|
    abort(c.syntax) if args.first.nil?
    parser = Moneymanager::Parser.new args.first
    entries = parser.parse
    archiver = Moneymanager::Archiver.new
    archiver.store(entries)
  end
end

command :backup do |c|
  c.syntax = 'mm backup'
  c.description = 'Create a backup copy of your archive (~/.moneymanager)'
  c.action do |_args, _options|
    archiver = Moneymanager::Archiver.new
    archiver.backup
  end
end

command :reset do |c|
  c.syntax = 'mm reset'
  c.description = 'Delete the current archive (danger zone!)'
  c.action do |_args, _options|
    Moneymanager::Archiver.reset if agree('Do you really want to delete everything?')
  end
end

command :print do |c|
  c.syntax = 'mm print [--month <month>]'
  c.description = 'Print the list of transactions'
  c.option '--month INTEGER', Integer, 'Specify the month to print.'
  c.option '--entry STRING', String, 'Specify the entry to print.'
  c.action do |_args, options|
    entries = get_entries(options.month, options.entry)
    Layout.print_multiple(entries)
  end
end

command :edit do |c|
  c.syntax = 'mm edit --entry SHA1'
  c.description = 'Edit the selected entry'
  c.option '--entry STRING', String, 'Specify the entry to edit.'
  c.action do |_args, options|
    raise ArgumentError, '--entry is required!' unless options.entry
    entry = get_entries(nil, options.entry).first
    prompt = TTY::Prompt.new
    command = prompt.select('Select one option:') do |menu|
      menu.choice 'Toggle bank transfer state', :toggle_bank_transfer
      menu.choice 'Delete', :delete_transaction
    end
    case command
    when :toggle_bank_transfer
      archiver = Moneymanager::Archiver.new
      entry.bank_transfer = !entry.bank_transfer?
      archiver.update(entry)
    when :delete_transaction
      archiver = Moneymanager::Archiver.new
      Layout.print_single(entry)
      archiver.delete(entry) if agree('Delete?')
    end
  end
end

command :tag do |c|
  c.syntax = 'mm tags'
  c.description = 'Print the list of transactions'
  c.option '--month INTEGER', Integer, 'Specify the month to tag.'
  c.option '--entry STRING', String, 'Specify the entry to tag.'
  c.action do |_args, options|
    entries = get_entries(options.month, options.entry)
    Tagger.new.retag(entries)
  end
end

command :review do |c|
  c.syntax = 'mm review'
  c.description = 'Start the review process'
  c.option '--month INTEGER', Integer, 'Specify the month to review.'
  c.option '--entry STRING', String, 'Specify the entry to review.'
  c.action do |_args, options|
    entries = get_entries(options.month, options.entry)
    Reviewer.new.review(entries)
  end
end

command :report do |c|
  c.syntax = 'mm report'
  c.description = 'Print all the revenues and all the expenses grouped by tag'
  c.option '--month INTEGER', Integer, 'Specify the month to report.'
  c.action do |_args, options|
    entries = get_entries(options.month, nil)

    prompt = TTY::Prompt.new
    command = prompt.select('Which type of report?', per_page: 30) do |menu|
      menu.choice 'Total (Incomes)', :global_incomes
      menu.choice 'Total (Expenses)', :global_expenses
      menu.choice 'All Incomes', :all_incomes
      menu.choice 'All Expenses', :all_expenses
      menu.choice 'Specific Tag', :one_tag
      menu.choice 'Specific Tag (grouped by month)', :one_tag_grouped_by_month
      menu.choice 'Bank transfers', :bank_transfers
    end
    report = Report.new
    case command
    when :global_incomes
      report.print_total_report(entries, true)
    when :global_expenses
      report.print_total_report(entries, false)
    when :all_incomes
      report.print_group_by_categories_report(entries, true)
    when :all_expenses
      report.print_group_by_categories_report(entries, false)
    when :one_tag_grouped_by_month
      archiver = Moneymanager::Archiver.new
      tags = archiver.tags.sort!
      tag = prompt.select('Select a tag.', tags, per_page: 30)
      report.print_group_by_month_report(entries, tag)
    when :one_tag
      archiver = Moneymanager::Archiver.new
      tags = archiver.tags.sort!
      tag = prompt.select('Select a tag.', tags, per_page: 30)
      report.print_only_matching_tag(entries, tag)
    when :bank_transfers
      archiver = Moneymanager::Archiver.new
      entries = archiver.all_bank_transfers
      Layout.print_multiple(entries)
    end
  end
end

def get_entries(month, entry_id)
  archiver = Moneymanager::Archiver.new
  result = archiver.all_entries

  unless month.nil?
    result = result.select do |entry|
      entry.date.month == month
    end
  end

  unless entry_id.nil?
    result = result.select do |entry|
      entry.digest.start_with?(entry_id)
    end
  end
  result
end
