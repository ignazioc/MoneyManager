#!/usr/bin/env ruby
require 'moneymanager'
require 'commander/import'

program :name, 'mm'
program :version, Moneymanager::VERSION
program :description, 'Manage your money via commandline'

command :add do |c|
  c.syntax = 'mm add <path>'
  c.description = 'Import the CSV file'
  c.action do |args, _options|
    abort(c.syntax) if args.first.nil?
    parser = Moneymanager::Parser.new args.first
    entries = parser.parse
    archiver = Moneymanager::Archiver.new
    archiver.store(entries)
  end
end

command :reset do |c|
  c.syntax = 'mm reset'
  c.description = 'Delete the current archive (danger zone!)'
  c.action do |_args, _options|
    if agree('Do you really want to delete everything?')
      Moneymanager::Archiver.reset
    end
  end
end

command :print do |c|
  c.syntax = 'mm print [--month <month>]'
  c.description = 'Print the list of transactions'
  c.option '--month INTEGER', Integer, 'Specify the month to print.'
  c.action do |_args, options|
    entries = get_entries(options.month)
    Layout.print_multiple(entries)
  end
end

command :tag do |c|
  c.syntax = 'mm tags'
  c.description = 'Print the list of transactions'
  c.option '--month INTEGER', Integer, 'Specify the month to tag.'
  c.action do |_args, options|
    entries = get_entries(options.month)
    Tagger.new.retag(entries)
  end
end

command :review do |c|
  c.syntax = 'mm review'
  c.description = 'Start the review process'
  c.option '--month INTEGER', Integer, 'Specify the month to review.'
  c.action do |_args, options|
    entries = get_entries(options.month)
    Reviewer.new.review(entries)
  end
end

command :report do |c|
  c.syntax = 'mm report'
  c.description = 'Print all the revenues and all the expenses grouped by tag'
  c.option '--month INTEGER', Integer, 'Specify the month to report.'
  c.action do |_args, options|
    entries = get_entries(options.month)

    # options = ["Global "]
    prompt = TTY::Prompt.new
    command = prompt.select("Choose your destiny?") do |menu|
      menu.choice 'Global Incomes/Expenses', :global
      menu.choice 'All categories', :all
      menu.choice 'One categoy', :one
    end

    puts command
    case command
      when :global
        print_global_report(entries)
      when :all
        print_all_categories_report(entries)
      when :one
        exit
      end    
  end
end

def print_global_report(entries)
  expenses = entries.reject(&:income?).map(&:amount).reduce(:+)
  incomes = entries.reject(&:expense?).map(&:amount).reduce(:+)
  Layout.print_summary(incomes, expenses)
end

def print_all_categories_report(entries)
  expenses = entries.reject(&:income?).each_with_object(Hash.new(0)) do |current, sum|
    tag = current.tag ||= 'Unknown'
    sum[tag] += current.amount
  end
  incomes = entries.reject(&:expense?).each_with_object(Hash.new(0)) do |current, sum|
    tag = current.tag ||= 'Unknown'
    sum[tag] += current.amount
  end

  incomes = incomes.map { |x, v| [x, v] }
  Layout.print_summary_per_category('Incomes', incomes)

  expenses = expenses.map { |x, v| [x, v] }
  Layout.print_summary_per_category('Expenses', expenses)
end

def get_entries(month)
  month ||= Date.today.month
  archiver = Moneymanager::Archiver.new
  archiver.all_entries_per_month(month)
end
